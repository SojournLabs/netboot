#!/usr/bin/env bash
# Create a CoreOS image with some changes. Expects an untouched image to modify in recore.config/images

# Copy in our certificate.
# Use dhcpcd (which allows releasing leases) instead of the default dhcp client.
# Set up a static ip address in Virtualbox.
# Mount a btrfs drive into /home, /var, /etc, and /root.
SCRIPT_DIR=$(cd $(dirname $0); pwd)
VAPR_DATA_DIRRO_config=${SCRIPT_DIR}/recore.config VAPR_DATA_DIR_build=`pwd`/build/recore ./dockertools/bin/run - squashfs_tools bash -c "
mkdir /tmp/{initrd,squashfs};
zcat config/images/coreos_production_pxe_image.cpio.gz > /tmp/coreos_production_pxe_image.cpio;
cd /tmp/initrd; cpio -id < ../coreos_production_pxe_image.cpio;
cd ../squashfs; unsquashfs ../initrd/usr.squashfs;
rm ../initrd/usr.squashfs; cd squashfs-root;
if [ ${PARANOID} -z TRUE ]; then
    rm -Rf ./share/ca-certificates/*;
fi;

cp /vapr/config/reformat.sh ./bin

cat /vapr/certstore/ca.crt >> ./share/ca-certificates/ca-certificates.crt;
rm lib/systemd/network/zz-default.network;
cp /vapr/config/dhcpcd.service ./lib64/systemd/system/dhcpcd.service;
cp /vapr/config/10-virtualbox.network lib/systemd/network/;

ln -s ../dhcpcd.service ./lib64/systemd/system/multi-user.target.wants/;
cp /vapr/config/systemd-cryptsetup\@enc.service ./lib64/systemd/system/systemd-cryptsetup\@enc.service;
ln -s ../systemd-cryptsetup\@enc.service ./lib64/systemd/system/local-fs-pre.target.wants/;
cp /vapr/config/btrfs.mount ./lib64/systemd/system/btrfs.mount;
ln -s ../btrfs.mount ./lib64/systemd/system/local-fs-pre.target.wants/;
cp /vapr/config/home.mount ./lib64/systemd/system/home.mount;
ln -s ../home.mount ./lib64/systemd/system/local-fs-pre.target.wants/;
cp /vapr/config/var.mount ./lib64/systemd/system/;
ln -s ../var.mount ./lib64/systemd/system/local-fs-pre.target.wants/;
cp /vapr/config/etc.mount ./lib64/systemd/system/;
ln -s ../etc.mount ./lib64/systemd/system/local-fs-pre.target.wants/;
cp /vapr/config/root.mount ./lib64/systemd/system/;
ln -s ../root.mount ./lib64/systemd/system/local-fs-pre.target.wants/;

cd /tmp/squashfs;
mksquashfs squashfs-root/ ../initrd/usr.squashfs  -noappend -always-use-fragments;
cd /tmp/initrd; find . | cpio -o -H newc | gzip > /vapr/build/bootserver.cpio.gz
"

# Sign the image.
rm ipxe_server.config/images/bootserver.cpio.gz
ln `pwd`/build/recore/bootserver.cpio.gz ipxe_server.config/images/bootserver.cpio.gz
export FILENAME=`pwd`/ipxe_server.config/images/bootserver.cpio.gz
cd ../certs; ./sign_file ${FILENAME}